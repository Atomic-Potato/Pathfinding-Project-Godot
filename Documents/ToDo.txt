# TODO
- Check again how abstraction works

- Unit types
	- Assault
	- Medic
	- Grenader
	- Tank
	- builder???
	
- Friendly unit
	x Selection
	x movement
	- Command to fire at enemy enetity
	- automatic fire at enemy entity
	- Passive and aggressive mode
		- Passive: Stays in position and only deffends
		- Aggressive: Keeps following enemy entity if possible

- Enemy unit passive
	- Stay in the same spot and fire at friendly units
- Enemy unit aggressive
	- Attack the established base point 
	- Eliminate any friendly units detected

- Fog of war system
- Camera movement system 
- Minimap system
- Defences building system

----------------------------------------------------------------------------------------

##### DUNGEON GENERATION
	You will need a set of room types and set of rules that dictate if another 
	room can spawned next to which
	
	- Dungeon Block/Element:
		- door sizes in tiles must of odd length and > 0
		- a block size must be of odd size and > 3
	
	- Room (SQUARE) rules:
		- Each side can have a door in 3 locations (left, mid, righ)
		- Needs at least one door
		- The door can connect to either a room or a tunnel
		- If the door size is greater than 2, then it must connect to a room
		- If the door size is 1, then it connects to a room or a tunnel
	- Tunnel rules: 
		- Tunnel length is the same size of one side of a room
		- Is vertical or horizontal depending on the door
		- The end of the tunnle is always open 
			unless closed in the final pass of the generation
		- Can have an open door of size 1 on its sides 
			connecting another tunnel or a room 
	
	##### ALGORITHM
	-- YOU DID NOT CONSIDER THE CASE WHEN THERE IS COLLISIONS
	-NOTE: Tunnels dont count as rooms
	
	Set rooms_count
	Set rooms_bias
	
	create queue explored_dungeon_element
	create queue unexplored_dungeon_element
	
	generate room
	enque generated room in unexplored
	
	while rooms_count > 0
		dequeue unexlpored
		
		if dequeued is room
			for each door in room
				if exists element in explored or unexplored
					if element is room
						open door of that same size
					else
						change this door to size 1 
						open adject door of size 1 to tunnel
					continue
					 
				if door size > 1
					generate room
				else
					choose room or tunnel with rooms_bias applied
					if chosen room
						generate room
					else
						generate tunnel
				enqueue generated element in unexplored
			rooms_count--
		else
			for each door in tunnel
				if exists element in explored or unexplored
						open adject element door of size 1
					continue
					
				choose room or tunnel with rooms_bias applied
				if chosen room
					generate room
				else
					generate tunnel
				enqueue generated element in unexplored
		enqueue the element in explored queue
			
	empty unexplored_dungeon_element
	while explored_dungeon_element is not empty
		dequeue explored
		for each element connect by a door in the dequeued
			if explored
				continue
			delete element
			close door
		if element is room
			add to rooms list
		else
			add to tunnels list

	##### Classes
	- Dungeon Manager:
		Generates the rooms and tunnels then stores them in lists
		- constant door size
		- constant block/element size
		- Rooms list
		- Tunnels list
		
	- Room
		- Position (ceneter position of the room in the tilemap coordinates)
		- Doors list
		
	- Tunnel
		- position (ceneter position of the tunnel in the tilemap coordinates)
		- direction 
		- doors list
		
	- Door
		- size
		- position Vector2 position in the element like top or right
		- positioning (left, right, mid)
		- direction (vertical, horizontal)
	
	##### Block position
	The positiion will be a custom coordinate on a 2D plane.
	The position indicates the block position in the world, converting the position
	to readl world coordinates will give us the tile in the center of the block
	position in the real world.
	For conversion, 1 unit in engine coordinates is equivalent to the size of 
	the block / 2 multiplied by how many pixels is a tile
	e.g. if we 16x16 tile and block size 3, then a position of (1,1) => (24,24)
----------------------------------------------------------------------------------------

- Adapt the pathfinding system to use the generated dungeon
- Add an option in the pathfinding system to scan solids using the tileset
	(this should ignore custom set values for grid cell size and use the tilemap cell)

##### PATHFINDING
You need to implement avoidence using the birds thingy and agent priority

# OPTIONAL
##### DUNGEON BUILDER
Allows the player to build their own maps 
